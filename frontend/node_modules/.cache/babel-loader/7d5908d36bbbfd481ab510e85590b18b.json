{"ast":null,"code":"import _regeneratorRuntime from \"/Users/haukewitte/Development/mtg/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/haukewitte/Development/mtg/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/haukewitte/Development/mtg/frontend/src/components/Search/SearchField.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AutoComplete, Input, Icon } from 'antd';\nimport { getAutoComplete } from '../../network/mtgApi';\nexport default (function (_ref) {\n  var onSearch = _ref.onSearch;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchString = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataSource = _useState4[0],\n      setDataSource = _useState4[1];\n\n  var inputEl = useRef(null);\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var suggestions;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getAutoComplete(searchString));\n\n            case 2:\n              suggestions = _context.sent;\n              setDataSource(suggestions);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    fetchData();\n  }, [searchString]);\n\n  var onSubmit = function onSubmit(value) {\n    onSearch(value || searchString);\n  };\n\n  return React.createElement(AutoComplete, {\n    autoFocus: true,\n    dataSource: dataSource,\n    placeholder: \"Search for a card\",\n    defaultActiveFirstOption: false,\n    onChange: function onChange(val) {\n      return setSearch(val);\n    },\n    onSelect: onSubmit,\n    ref: inputEl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Input, {\n    onPressEnter: function onPressEnter(e) {\n      e.persist();\n      setTimeout(function () {\n        onSubmit(e.target.value);\n      }, 100);\n    },\n    suffix: React.createElement(Icon, {\n      type: \"search\",\n      onClick: onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/haukewitte/Development/mtg/frontend/src/components/Search/SearchField.jsx"],"names":["React","useState","useEffect","useRef","AutoComplete","Input","Icon","getAutoComplete","onSearch","searchString","setSearch","dataSource","setDataSource","inputEl","fetchData","suggestions","onSubmit","value","val","e","persist","setTimeout","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,YAAT,EAAuBC,KAAvB,EAA8BC,IAA9B,QAA0C,MAA1C;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,gBAAe,gBAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACGP,QAAQ,CAAC,EAAD,CADX;AAAA;AAAA,MACxBQ,YADwB;AAAA,MACVC,SADU;;AAAA,mBAEKT,QAAQ,CAAC,EAAD,CAFb;AAAA;AAAA,MAExBU,UAFwB;AAAA,MAEZC,aAFY;;AAG/B,MAAMC,OAAO,GAAGV,MAAM,CAAC,IAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMY,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACUP,eAAe,CAACE,YAAD,CADzB;;AAAA;AACVM,cAAAA,WADU;AAEhBH,cAAAA,aAAa,CAACG,WAAD,CAAb;;AAFgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAIAD,IAAAA,SAAS;AACV,GANQ,EAMN,CAACL,YAAD,CANM,CAAT;;AAQA,MAAMO,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxBT,IAAAA,QAAQ,CAACS,KAAK,IAAIR,YAAV,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,YAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,UAAU,EAAEE,UAFd;AAGE,IAAA,WAAW,EAAC,mBAHd;AAIE,IAAA,wBAAwB,EAAE,KAJ5B;AAKE,IAAA,QAAQ,EAAE,kBAAAO,GAAG;AAAA,aAAIR,SAAS,CAACQ,GAAD,CAAb;AAAA,KALf;AAME,IAAA,QAAQ,EAAEF,QANZ;AAOE,IAAA,GAAG,EAAEH,OAPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,KAAD;AACE,IAAA,YAAY,EAAE,sBAAAM,CAAC,EAAI;AACjBA,MAAAA,CAAC,CAACC,OAAF;AACAC,MAAAA,UAAU,CAAC,YAAM;AACfL,QAAAA,QAAQ,CAACG,CAAC,CAACG,MAAF,CAASL,KAAV,CAAR;AACD,OAFS,EAEP,GAFO,CAAV;AAGD,KANH;AAOE,IAAA,MAAM,EAAE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAoB,MAAA,OAAO,EAAED,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAqBD,CAtCD","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { AutoComplete, Input, Icon } from 'antd'\nimport { getAutoComplete } from '../../network/mtgApi'\n\nexport default ({ onSearch }) => {\n  const [searchString, setSearch] = useState('')\n  const [dataSource, setDataSource] = useState('')\n  const inputEl = useRef(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const suggestions = await getAutoComplete(searchString)\n      setDataSource(suggestions)\n    }\n    fetchData()\n  }, [searchString])\n\n  const onSubmit = value => {\n    onSearch(value || searchString)\n  }\n\n  return (\n    <AutoComplete\n      autoFocus\n      dataSource={dataSource}\n      placeholder=\"Search for a card\"\n      defaultActiveFirstOption={false}\n      onChange={val => setSearch(val)}\n      onSelect={onSubmit}\n      ref={inputEl}\n    >\n      <Input\n        onPressEnter={e => {\n          e.persist()\n          setTimeout(() => {\n            onSubmit(e.target.value)\n          }, 100)\n        }}\n        suffix={<Icon type=\"search\" onClick={onSubmit} />}\n      />\n    </AutoComplete>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}