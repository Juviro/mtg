{"ast":null,"code":"import _regeneratorRuntime from \"/Users/haukewitte/Development/mtg/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { Cards } from 'scryfall-sdk';\nvar MAX_CARDS = 50;\nexport var getAutoComplete = function getAutoComplete(search) {\n  return Cards.autoCompleteName(search);\n};\nexport var getCards = function getCards(search) {\n  return _regeneratorRuntime.async(function getCards$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            var cards = [];\n            var isResolved = false;\n            var emitter = search ? Cards.search(search) : Cards.all();\n            return;\n            emitter.on('data', function (card) {\n              if (isResolved) return;\n\n              if (cards.length >= MAX_CARDS) {\n                isResolved = true;\n                resolve(cards);\n                emitter.cancel();\n              } else {\n                cards.push(card);\n              }\n            }).on('end', function () {\n              !isResolved && resolve(cards);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/haukewitte/Development/mtg/frontend/src/network/mtgApi.js"],"names":["Cards","MAX_CARDS","getAutoComplete","search","autoCompleteName","getCards","Promise","resolve","cards","isResolved","emitter","all","on","card","length","cancel","push"],"mappings":";AAAA,SAASA,KAAT,QAAsB,cAAtB;AAEA,IAAMC,SAAS,GAAG,EAAlB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,MAAM,EAAI;AACvC,SAAOH,KAAK,CAACI,gBAAN,CAAuBD,MAAvB,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAMF,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2CACf,IAAIG,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,gBAAMC,KAAK,GAAG,EAAd;AACA,gBAAIC,UAAU,GAAG,KAAjB;AAEA,gBAAMC,OAAO,GAAGP,MAAM,GAAGH,KAAK,CAACG,MAAN,CAAaA,MAAb,CAAH,GAA0BH,KAAK,CAACW,GAAN,EAAhD;AACA;AACAD,YAAAA,OAAO,CACJE,EADH,CACM,MADN,EACc,UAAAC,IAAI,EAAI;AAClB,kBAAIJ,UAAJ,EAAgB;;AAChB,kBAAID,KAAK,CAACM,MAAN,IAAgBb,SAApB,EAA+B;AAC7BQ,gBAAAA,UAAU,GAAG,IAAb;AACAF,gBAAAA,OAAO,CAACC,KAAD,CAAP;AACAE,gBAAAA,OAAO,CAACK,MAAR;AACD,eAJD,MAIO;AACLP,gBAAAA,KAAK,CAACQ,IAAN,CAAWH,IAAX;AACD;AACF,aAVH,EAWGD,EAXH,CAWM,KAXN,EAWa,YAAM;AACf,eAACH,UAAD,IAAeF,OAAO,CAACC,KAAD,CAAtB;AACD,aAbH;AAcD,WApBM,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB","sourcesContent":["import { Cards } from 'scryfall-sdk'\n\nconst MAX_CARDS = 50\n\nexport const getAutoComplete = search => {\n  return Cards.autoCompleteName(search)\n}\n\nexport const getCards = async search => {\n  return new Promise(resolve => {\n    const cards = []\n    let isResolved = false\n\n    const emitter = search ? Cards.search(search) : Cards.all()\n    return\n    emitter\n      .on('data', card => {\n        if (isResolved) return\n        if (cards.length >= MAX_CARDS) {\n          isResolved = true\n          resolve(cards)\n          emitter.cancel()\n        } else {\n          cards.push(card)\n        }\n      })\n      .on('end', () => {\n        !isResolved && resolve(cards)\n      })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}