################################# Card #################################

type Card {
  # Core card fields
  id: String!
  set: String!
  name: String!
  image_uris: ImageUris
  card_faces: [CardFace!]
  prices: Prices!
  rarity: String!
  oracle_text: String
  cmc: Float!
  legalities: Legalities!
  purchase_uris: PurchaseUris!
  oracle_id: String!
  rulings_uri: String!
  colors: [String]
  color_identity: [String]
  set_name: String!
  mana_cost: String

  # Additional card fields
  previewImg: String
  imgKey: String!

  isTwoFaced: Boolean!
  isCommanderLegal: Boolean!
  primaryTypes: [String!]!
  subTypes: [String!]!

  allSets: [Card!]!

  minPrice: Float!
  sumPrice: Float

  owned: Boolean!
  amountOwned: Int!
  amountOwnedFoil: Int!
  totalAmount: Int!

  # used by Deck and WantsList
  amount: Int!
  # Deck specific fields
  zone: String!
  # used by collection, deck, wants
  createdAt: String

  # Find card in lists
  containingDecks: [Deck!]!
  containingWantsLists: [ContainingList!]!
}

type ContainingList {
  id: String!
  name: String!
  amount: Int!
}

type Set {
  id: String!
  set: String!
  prices: Prices!
  image_uris: ImageUris
  card_faces: [CardFace!]
}

type PurchaseUris {
  tcgplayer: String
  cardmarket: String
}

type Prices {
  eur: String
  usd: String
  usd_foil: String
}

type Legalities {
  standard: String
  modern: String
  commander: String
}

type CardFace {
  name: String!
  image_uris: ImageUris
  colors: [String]
}

type ImageUris {
  small: String
  normal: String
  art_crop: String
}

type CachedCard {
  i: String!
  n: String!
  o: String!
  k: String
}

type PaginatedCards {
  hasMore: Boolean!
  nextOffset: Int
  totalResults: Int!
  cards: [Card!]!
}

################################# Deck #################################

type Deck {
  id: String!
  name: String!
  createdAt: String!
  lastEdit: String!
  imgSrc: String!
  numberOfCards: Int!
  cards: [DeckCard!]!
}

type DeckCard {
  id: String!
  amount: Int!
  createdAt: String!
  zone: String!
  card: Card!
}

################################# Collection #################################

type Collection {
  id: String!
  cards: [CollectionCard!]!
}

type CollectionCard {
  id: String!
  createdAt: String!
  card: Card!
}

################################# User #################################

type User {
  id: String!
  name: String!
  avatar: String!
  email: String!
}

################################# Wants #################################

type WantsList {
  id: String!
  name: String!
  lastEdit: String!
  createdAt: String!
  numberOfCards: Int!
  cards: [WantsListCard!]!
}

type WantsListCard {
  id: String!
  createdAt: String!
  amount: Int!
  card: Card!
}

################################# Queries #################################

type Query {
  user: User!

  deck(id: String!): Deck!
  decks: [Deck!]!

  collection: Collection!

  card(id: String!): Card!
  cardSearch(
    offset: Int
    limit: Int
    options: CardsOptionsInput
  ): PaginatedCards!
  cardByOracleId(oracle_id: String!): Card!

  numberOfCachedCards: Int!
  cachedCards: [CachedCard!]!

  wantsList(id: String!): WantsList!
  wantsLists: [WantsList!]!
}

input CardsOptionsInput {
  name: String
  colors: String
  creatureType: String
  cardType: String
  isLegendary: String
  isCommanderLegal: Boolean
  isOwned: Boolean
  text: String
  cmc: String
  rarity: String
  power: String
  toughness: String
  set: String
  orderBy: String
}

################################# Mutations #################################

type Mutation {
  ########## Deck ##########
  createDeck: Deck!
  addCardsToDeck(deckId: String!, cards: [CardInputType!]!): Deck!
  editDeck(deckId: String!, newProperties: EditDeckFieldsInput!): Deck!
  editDeckCard(
    cardId: String!
    deckId: String!
    newProps: EditDeckCardInput!
  ): DeckCard!
  deleteDeck(deckId: String!): Boolean
  deleteFromDeck(cardId: String!, deckId: String!): Deck!
  duplicateDeck(deckId: String!): String!

  ########## Collection ##########
  addToCollection(cards: [AddToCollectionInput]!): [CollectionCard]!
  changeCollection(
    cardOracleId: String!
    added: [ChangeCollectionInput!]
    edited: [ChangeCollectionInput!]
    deleted: [String!]
    cardId: String
  ): CollectionCard!
  deleteFromCollection(cardIds: [String]!): Boolean!

  ########## Session ##########
  login(token: String): LoginResponse!
  logout: Boolean

  ########## Wants ##########
  createWantsList: WantsList!
  editWantsList(
    wantsListId: String!
    newProperties: EditWantsListFieldsInput!
  ): WantsList!
  editWantsListCard(
    cardId: String!
    wantsListId: String!
    newProps: EditWantsListCardInput!
  ): WantsListCard!
  deleteFromWantsList(cardId: String!, wantsListId: String!): WantsList!
  deleteWantsList(wantsListId: String!): Boolean!
  duplicateWantsList(wantsListId: String!): WantsList!
  addCardsToWantsList(
    wantsListId: String!
    cards: [CardInputType!]!
  ): [WantsListCard!]!
}

################################# Deck #################################

input EditDeckFieldsInput {
  name: String
  imgSrc: String
}

input CardInputType {
  id: String!
  amount: Int
}

input EditDeckCardInput {
  id: String
  zone: String
  amount: Int
}

################################# Collection #################################

input AddToCollectionInput {
  id: String!
  amount: Int
}

input ChangeCollectionInput {
  id: String!
  amountOwned: Int
  amountOwnedFoil: Int
}

################################# Session #################################

type LoginResponse {
  session: String!
}

################################# Wants List #################################

input EditWantsListFieldsInput {
  name: String
}
input EditWantsListCardInput {
  id: String
  amount: Int
}
